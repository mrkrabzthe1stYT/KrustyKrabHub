local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "KrustyKrabHub",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Best Hub Under The Sea",
    LoadingSubtitle = "By MrKrabzz",
    Theme = "Ocean", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = True,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })
 
 -- MAIN TAB --
 local MainTab = Window:CreateTab("Main", nil) -- Title, Image

 local ESPEnabled = false
 local ESPTracerEnabled = false  -- This is the tracer toggle
 local HighlightedParts = {}
 local Tracers = {}
 local Player = game.Players.LocalPlayer
 local Teams = game:GetService("Teams")
 local CurrentESPColor = Color3.fromRGB(139, 0, 0) -- Default dark red

-- Helper function to create an outline box (using BillboardGui for visibility through walls)
local function CreateOutline(player)
    local character = player.Character
    if character and character:FindFirstChild("UpperTorso") then
        local upperTorso = character:FindFirstChild("UpperTorso")

        local function createBillboard(size, parent)
            local billboardGui = Instance.new("BillboardGui")
            billboardGui.Adornee = parent
            billboardGui.Parent = parent
            billboardGui.Size = UDim2.new(0, size.X, 0, size.Y)
            billboardGui.StudsOffset = Vector3.new(0, 0, 0)
            billboardGui.AlwaysOnTop = true
            billboardGui.MaxDistance = 1000
            billboardGui.Enabled = ESPEnabled

            local frame = Instance.new("Frame")
            frame.Parent = billboardGui
            frame.Size = UDim2.new(0, size.X, 0, size.Y)
            frame.BackgroundColor3 = CurrentESPColor -- Use the current ESP color
            frame.BackgroundTransparency = 0.4
            frame.BorderSizePixel = 2
            frame.BorderColor3 = CurrentESPColor -- Use the current ESP color

            return billboardGui
        end

        local torsoBox = createBillboard(Vector2.new(20, 20), upperTorso)
        HighlightedParts[player] = {torsoBox}

        game:GetService("RunService").Heartbeat:Connect(function()
            if character and character.Parent then
                if upperTorso and upperTorso.Parent then
                    torsoBox.StudsOffset = Vector3.new(0, 0, 0)
                end
            end
        end)
    end
end

-- Remove ESP highlight
local function UnhighlightPlayer(player)
    if HighlightedParts[player] then
        for _, billboardGui in ipairs(HighlightedParts[player]) do
            billboardGui.Parent = nil
        end
        HighlightedParts[player] = nil
    end
end

-- Create the tracer line from your character to the highlighted player
local function CreateTracer(player)
    local character = player.Character
    if character and character:FindFirstChild("UpperTorso") then
        local upperTorso = character:FindFirstChild("UpperTorso")
        local myCharacter = Player.Character
        if myCharacter and myCharacter:FindFirstChild("UpperTorso") then
            local myUpperTorso = myCharacter:FindFirstChild("UpperTorso")

            local line = Instance.new("Part")
            line.Size = Vector3.new(0.2, 0.2, 0.2)
            line.Anchored = true
            line.CanCollide = false
            line.Color = Color3.fromRGB(255, 0, 0) -- Red color for the line (can be customized)
            line.Parent = game.Workspace

            Tracers[player] = line

            game:GetService("RunService").Heartbeat:Connect(function()
                if myCharacter and myCharacter.Parent and upperTorso and upperTorso.Parent then
                    local startPosition = myUpperTorso.Position + Vector3.new(0, 1.5, 0)
                    local endPosition = upperTorso.Position + Vector3.new(0, 2, 0)
                    local direction = (endPosition - startPosition).unit
                    local distance = (endPosition - startPosition).Magnitude
                    line.CFrame = CFrame.new(startPosition, endPosition)
                    line.Size = Vector3.new(0.2, 0.2, distance)

                    if distance <= 0.2 then
                        line.Size = Vector3.new(0.2, 0.2, 0.2)
                    end
                end
            end)
        end
    end
end

-- Remove the tracer line for a player
local function RemoveTracer(player)
    if Tracers[player] then
        Tracers[player]:Destroy()
        Tracers[player] = nil
    end
end


-- Check if the player is on the same team or an enemy team
local function IsEnemyTeam(player)
    local playerTeam = player.Team
    local localPlayerTeam = Player.Team

    return playerTeam ~= localPlayerTeam
end

-- Aimbot feature: Find closest enemy and lock onto the middle of their ESP box (with 45° FOV)
local function LockOntoClosestEnemy()
    local closestPlayer = nil
    local closestDistance = math.huge
    local myCharacter = Player.Character
    local mouse = Player:GetMouse()

    if not myCharacter then return end

    -- Get the player's camera and view
    local camera = game:GetService("Workspace").CurrentCamera
    local cameraCFrame = camera.CFrame
    local cameraPosition = cameraCFrame.Position
    local cameraLookVector = cameraCFrame.LookVector  -- The direction the camera is facing

    -- Loop through all players
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= Player and IsEnemyTeam(player) and player.Character then
            local character = player.Character
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                -- Get the center position of the player's ESP box (BillboardGui)
                local billboardGui = HighlightedParts[player] and HighlightedParts[player][1]  -- The first box for the player
                if billboardGui then
                    local targetPosition = billboardGui.Adornee.Position + Vector3.new(0, 2, 0)  -- Center of the ESP box (adjusted above the torso)

                    -- Calculate the direction vector from the player's camera to the enemy's target position
                    local directionToTarget = (targetPosition - cameraPosition).unit
                    local angle = math.acos(cameraLookVector:Dot(directionToTarget)) * (180 / math.pi)  -- Angle in degrees

                    -- Check if the enemy is within a 45° FOV
                    if angle <= 45 then
                        -- Calculate the distance from the player to the target position
                        local distance = (myCharacter.HumanoidRootPart.Position - targetPosition).Magnitude
                        if distance < closestDistance then
                            closestDistance = distance
                            closestPlayer = player
                        end
                    end
                end
            end
        end
    end

    -- Lock the aim to the closest enemy only if right-click is held down
    if closestPlayer and game:GetService("UserInputService"):IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
        local targetCharacter = closestPlayer.Character
        local targetHumanoidRootPart = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")

        if targetHumanoidRootPart then
            -- Smoothly rotate the camera to face the target (without moving the player)
            local targetPosition = targetHumanoidRootPart.Position
            local lookAt = CFrame.new(myCharacter.HumanoidRootPart.Position, targetPosition)
            game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(cameraPosition, targetPosition)  -- Rotate camera to face the target
        end
    end
end

local function LockOntoClosestEnemy()
    local closestPlayer = nil
    local closestDistance = math.huge
    local myCharacter = Player.Character
    local mouse = Player:GetMouse()

    if not myCharacter then return end

    -- Get the player's camera and view
    local camera = game:GetService("Workspace").CurrentCamera
    local cameraCFrame = camera.CFrame
    local cameraPosition = cameraCFrame.Position
    local cameraLookVector = cameraCFrame.LookVector  -- The direction the camera is facing

    -- Get mouse position
    local mousePos = game:GetService("UserInputService"):GetMouseLocation()

    -- Get the radius and position of the FOV circle
    local fovRadius = _G.CircleRadius
    local fovCenter = Vector2.new(mousePos.X, mousePos.Y)

    -- Loop through all players
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= Player and IsEnemyTeam(player) and player.Character then
            local character = player.Character
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                -- Get the center position of the player's ESP box (BillboardGui)
                local billboardGui = HighlightedParts[player] and HighlightedParts[player][1]  -- The first box for the player
                if billboardGui then
                    local targetPosition = billboardGui.Adornee.Position + Vector3.new(0, 2, 0)  -- Center of the ESP box (adjusted above the torso)

                    -- Calculate the direction vector from the player's camera to the enemy's target position
                    local directionToTarget = (targetPosition - cameraPosition).unit
                    local angle = math.acos(cameraLookVector:Dot(directionToTarget)) * (180 / math.pi)  -- Angle in degrees

                    -- Check if the enemy is within a 45° FOV
                    if angle <= 45 then
                        -- Calculate the distance from the player to the target position
                        local distance = (myCharacter.HumanoidRootPart.Position - targetPosition).Magnitude
                        if distance < closestDistance then
                            -- Check if the target is within the FOV circle (using mouse position and distance from the FOV center)
                            local screenPosition = camera:WorldToScreenPoint(targetPosition)
                            local screenVector = Vector2.new(screenPosition.X, screenPosition.Y)
                            local distanceFromFovCenter = (screenVector - fovCenter).Magnitude
                            
                            -- If the player is within the FOV circle (distance is less than the circle radius)
                            if distanceFromFovCenter <= fovRadius then
                                closestDistance = distance
                                closestPlayer = player
                            end
                        end
                    end
                end
            end
        end
    end

    -- Lock the aim to the closest enemy only if right-click is held down
    if closestPlayer and game:GetService("UserInputService"):IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
        local targetCharacter = closestPlayer.Character
        local targetHumanoidRootPart = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")

        if targetHumanoidRootPart then
            -- Smoothly rotate the camera to face the target (without moving the player)
            local targetPosition = targetHumanoidRootPart.Position
            local lookAt = CFrame.new(myCharacter.HumanoidRootPart.Position, targetPosition)
            game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(cameraPosition, targetPosition)  -- Rotate camera to face the target
        end
    end
end

local Toggle = MainTab:CreateToggle({
    Name = "ESP",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        ESPEnabled = Value

        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild("UpperTorso") and IsEnemyTeam(player) then
                if ESPEnabled then
                    CreateOutline(player)
                    if ESPTracerEnabled then -- Only create tracer if the tracer toggle is on
                        CreateTracer(player)
                    end
                else
                    UnhighlightPlayer(player)
                    RemoveTracer(player)
                end
            end
        end
    end,
})

local Dropdown = MainTab:CreateDropdown({
    Name = "Esp Color",
    Options = {"Default (red)","Purple", "Blue", "Green", "Yellow"},
    CurrentOption = {"Option 1"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Options)
        local selectedColor = Options[1]

        if selectedColor == "Default (red)" then
            CurrentESPColor = Color3.fromRGB(139, 0, 0)
        elseif selectedColor == "Purple" then
            CurrentESPColor = Color3.fromRGB(128, 0, 128)
        elseif selectedColor == "Blue" then
            CurrentESPColor = Color3.fromRGB(0, 0, 255)
        elseif selectedColor == "Green" then
            CurrentESPColor = Color3.fromRGB(0, 255, 0)
        elseif selectedColor == "Yellow" then
            CurrentESPColor = Color3.fromRGB(255, 255, 0)
        end

        if ESPEnabled then
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("UpperTorso") and IsEnemyTeam(player) then
                    UnhighlightPlayer(player)
                    CreateOutline(player)
                end
            end
        end
    end,
})

-- Initialize ESP and Tracers for players already in the game
game.Players.PlayerAdded:Connect(function(player)
    if player ~= Player and IsEnemyTeam(player) and ESPEnabled and player.Character and player.Character:FindFirstChild("UpperTorso") then
        CreateOutline(player)
        if ESPTracerEnabled then
            CreateTracer(player)
        end
    end
end)

for _, player in pairs(game.Players:GetPlayers()) do
    if player ~= Player and IsEnemyTeam(player) and ESPEnabled and player.Character and player.Character:FindFirstChild("UpperTorso") then
        CreateOutline(player)
        if ESPTracerEnabled then
            CreateTracer(player)
        end
    end
end

-- ESP Tracer Toggle
local TracerToggle = MainTab:CreateToggle({
    Name = "ESP Tracers",
    CurrentValue = false,
    Flag = "TracerToggle",
    Callback = function(Value)
        ESPTracerEnabled = Value
        if ESPEnabled then -- Update tracers only if ESP is also enabled
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("UpperTorso") and IsEnemyTeam(player) then
                    RemoveTracer(player) -- Remove old tracers
                    if ESPTracerEnabled then
                        CreateTracer(player) -- Add new tracers if enabled
                    end
                end
            end
        end
    end,
})


-- Toggle Aimbot on/off
local ToggleAimbot = MainTab:CreateToggle({
    Name = "Aimbot",
    CurrentValue = false,
    Flag = "Toggle3", -- A flag is the identifier for the configuration file
    Callback = function(Value)
        -- Continuously run the aimbot logic when toggled on
        if Value then
            game:GetService("RunService").Heartbeat:Connect(function()
                if game:GetService("UserInputService"):IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
                    LockOntoClosestEnemy()  -- Run the aimbot logic while right-click is held down
                end
            end)
        end
    end,
})

-- Monitor new player joins and updates
game.Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        -- Reset ESP for new player joining
        if ESPEnabled and IsEnemyTeam(player) then
            CreateOutline(player)
            if ESPTracerEnabled then
                CreateTracer(player)
            end
        end
    end)

    -- Monitor team changes
    player.Changed:Connect(function(property)
        if property == "Team" then
            if ESPEnabled then
                if IsEnemyTeam(player) then
                    CreateOutline(player)
                    if ESPTracerEnabled then
                        CreateTracer(player)
                    end
                else
                    UnhighlightPlayer(player)
                    RemoveTracer(player)
                end
            end
        end
    end)
end)

-- Ensure ESP is removed when players leave
game.Players.PlayerRemoving:Connect(function(player)
    UnhighlightPlayer(player)
    RemoveTracer(player)
end)

local Toggle = MainTab:CreateToggle({
    Name = "Aimbot Fov",
    CurrentValue = false,
    Flag = "Toggle1", -- Flag for configuration saving
    Callback = function(Value)
        -- Set up global settings for the circle
        _G.CircleSides = 64
        _G.CircleColor = Color3.fromRGB(255, 255, 255)
        _G.CircleTransparency = 0.7
        _G.CircleRadius = 80
        _G.CircleFilled = false
        _G.CircleVisible = Value  -- Toggle visibility based on the toggle value
        _G.CircleThickness = 0

        -- Check if the circle should be visible or not
        if _G.CircleVisible then
            -- Create or update the circle drawing
            if not _G.Circle then
                _G.Circle = Drawing.new("Circle")
                _G.Circle.Filled = _G.CircleFilled
                _G.Circle.Thickness = _G.CircleThickness
                _G.Circle.Radius = _G.CircleRadius
                _G.Circle.NumSides = _G.CircleSides
                _G.Circle.Color = _G.CircleColor
                _G.Circle.Transparency = _G.CircleTransparency
            end
        else
            -- Remove the circle if it's not visible
            if _G.Circle then
                _G.Circle.Visible = false
            end
        end
    end,
})

-- Update the circle's position if it exists
game:GetService("RunService").RenderStepped:Connect(function()
    if _G.Circle and _G.CircleVisible then
        local player = game.Players.LocalPlayer
        local mousePos = game:GetService("UserInputService"):GetMouseLocation()
        
        -- Set the circle's position based on the mouse location or the player's character
        _G.Circle.Position = Vector2.new(mousePos.X, mousePos.Y)
    end
end)

local Toggle = MainTab:CreateToggle({
   Name = "No Spread",
   CurrentValue = false,  -- This is the default value when the toggle is off
   Flag = "Toggle5", -- Unique flag for saving the setting
   Callback = function(Value)
       -- Check if the player has a tool (gun) equipped
       local player = game.Players.LocalPlayer
       local character = player.Character
       local tool = character and character:FindFirstChildOfClass("Tool")

       if tool and tool:FindFirstChild("Handle") then
           -- We are assuming that the gun has a property for spread, which Arsenal guns typically do
           local gun = tool

           -- Set the spread to 0 if 'No Spread' is toggled on, else restore it
           if Value then
               -- Disable bullet spread
               if gun:FindFirstChild("BulletSpread") then
                   gun.BulletSpread.Value = 0  -- Set BulletSpread to 0 for no spread
               end
           else
               -- Restore normal spread (you might want to find the normal spread value for the specific gun)
               if gun:FindFirstChild("BulletSpread") then
                   gun.BulletSpread.Value = 1  -- Set BulletSpread back to its normal value (default is typically 1)
               end
           end
       end
   end,
})

 -- END OF MAIN TAB --

 -- MISCELLANEOUS TAB --
 local MiscellaneousTab = Window:CreateTab("Miscellaneous", nil) -- Title, Image

 local Slider = MiscellaneousTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {1, 100},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 10,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = Value  -- Directly set the WalkSpeed of the player's Humanoid
        end
    end,
})

 local Input = MiscellaneousTab:CreateInput({
    Name = "Tp Via Name",
    CurrentValue = "",
    PlaceholderText = "Tp Via Name",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        -- This is where the teleportation logic will be added

        local Players = game:GetService("Players")
        
        local function teleportToPlayer(playerNameOrDisplayName)
            local targetPlayer = nil

            -- First, try to find by display name
            for _, player in pairs(Players:GetPlayers()) do
                if player.DisplayName:lower() == playerNameOrDisplayName:lower() or player.Name:lower() == playerNameOrDisplayName:lower() then
                    targetPlayer = player
                    break
                end
            end

            if targetPlayer then
                local targetCharacter = targetPlayer.Character
                if targetCharacter then
                    local targetHumanoidRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")
                    if targetHumanoidRootPart then
                        local playerCharacter = Players.LocalPlayer.Character
                        if playerCharacter then
                            local playerHumanoidRootPart = playerCharacter:FindFirstChild("HumanoidRootPart")
                            if playerHumanoidRootPart then
                                -- Add a delay to avoid instant teleportation
                                wait(math.random(0.5, 1))

                                -- Teleport the player to a position slightly above the target player
                                playerHumanoidRootPart.CFrame = targetHumanoidRootPart.CFrame * CFrame.new(0, 5, 0)
                            end
                        end
                    end
                end
            else
                -- If no player was found, print an error message
                warn("Player not found with that name or display name")
            end
        end

        -- Check if the input text is not empty and then teleport
        if Text ~= "" then
            teleportToPlayer(Text)
        end
    end,
})

-- TEXT TAB --
local TextTab = Window:CreateTab("Text", nil) -- Title, Image

local Input = TextTab:CreateInput({
    Name = "Chat bypass",
    CurrentValue = "",
    PlaceholderText = "Chat bypass",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        -- Convert the input text to the desired format
        local function formatText(inputText)
            local formattedText = ""
            for i = 1, #inputText do
                local char = inputText:sub(i, i)
                formattedText = formattedText .. "<" .. char:lower() .. ">"
            end
            return formattedText
        end

        -- Listen for when the user presses "Enter" in the input box
        local function onEnterKey(input)
            if input.KeyCode == Enum.KeyCode.Return then
                local formattedMessage = formatText(Text)
                
                -- Send the formatted message to the chat using ChatService
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(formattedMessage, "All")
            end
        end

        -- Connect the Enter key press to the callback
        game:GetService("UserInputService").InputBegan:Connect(onEnterKey)
    end,
})


-- END OF TEXT TAB --
local OpTab = Window:CreateTab("OP (broken)", nil) -- Title, Image

-- OP Tab --

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Create a dummy gun (for simulating shooting)
local gun = Instance.new("Tool")
gun.Name = "Gun"
gun.RequiresHandle = true
gun.Parent = player.Backpack

-- Function to check if a player is alive
local function IsPlayerAlive(player)
    return player and player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0
end

-- Simulate shooting (deals damage)
local function ShootAtTarget(target)
    if target and target.Character and target.Character:FindFirstChild("Humanoid") then
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Exclude
        raycastParams.FilterDescendantsInstances = {character}

        local rayOrigin = character.HumanoidRootPart.Position
        local rayDirection = (target.Character.HumanoidRootPart.Position - rayOrigin).unit * 500

        local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)

        if raycastResult and raycastResult.Instance and raycastResult.Instance.Parent and raycastResult.Instance.Parent:FindFirstChild("Humanoid") then
            local hitHumanoid = raycastResult.Instance.Parent:FindFirstChild("Humanoid")
            if hitHumanoid and hitHumanoid ~= humanoid then
                hitHumanoid:TakeDamage(100)  -- Adjust damage as needed
            end
        end
    end
end

-- Get the nearest *alive* player
local function GetNextTarget(currentPlayer) -- Pass the current target to avoid targeting them again immediately.
    local nextTarget = nil
    local shortestDistance = math.huge

    for _, otherPlayer in pairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer ~= currentPlayer and IsPlayerAlive(otherPlayer) then -- Exclude self and current target
            local distance = (character.HumanoidRootPart.Position - otherPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nextTarget = otherPlayer
            end
        end
    end
    return nextTarget
end


-- Kill and teleport function
local function KillAndTeleport()
    local currentTarget = nil -- Keep track of the current target

    while killing do
        currentTarget = GetNextTarget(currentTarget) -- Find the next target, excluding the current one.

        if currentTarget and IsPlayerAlive(currentTarget) then
            local targetPosition = currentTarget.Character.HumanoidRootPart.Position
            character:SetPrimaryPartCFrame(CFrame.new(targetPosition))

            wait(0.1) -- Small delay after teleport

            ShootAtTarget(currentTarget)

            -- Check if the target is still alive after the shot. If not, get the next target immediately.
            if not IsPlayerAlive(currentTarget) then
                currentTarget = nil -- Reset current target to find the next one
            end
        else
            wait(0.1) -- If no target is found, wait briefly before checking again.
        end
    end
end


-- Killing sequence toggle
local killing = false

local function StartKillingSequence()
    if killing then return end
    killing = true
    KillAndTeleport() -- Start the kill/teleport loop
end

local function StopKillingSequence()
    killing = false
end


-- OpTab toggle (assuming OpTab is defined)
local Toggle = OpTab:CreateToggle({
    Name = "Kill Everyone",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value then
            StartKillingSequence()
        else
            StopKillingSequence()
        end
    end,
})





